<?xml version="1.0" encoding="UTF-8"?>

<project name="fse-3" default="compile" basedir=".">

    <property file="build.properties"/>
    <property file="svn-ignore.properties"/>
    <property file="alt-renames.properties"/>
    <property name="one" value="1" />

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>

        <file file="${src.dir}/resources/META-INF/persistence.xml"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${apiguardian}"/>
        <pathelement location="${junit.jupiter}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <!-- ===== 1. COMPILE ===== -->
    <target name="compile" depends="clean">
        <echo message="***** COMPILE STARTED *****"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"/>

        <echo message="***** COMPILE COMPLETED *****"/>
    </target>

    <!-- ===== 2. BUILD ===== -->
    <target name="build" depends="compile, native2ascii">
        <echo message="***** BUILD STARTED *****"/>
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}/resources"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="petrovviacheslav"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="petrovviacheslav"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </war>
        <echo message="***** BUILD COMPLETED *****"/>
    </target>

    <!-- ===== 3. CLEAN ===== -->
    <target name="clean">
        <echo message="***** CLEAN STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="***** CLEAN COMPLETED *****"/>
    </target>

    <!-- ===== 4. TEST ===== -->
    <target name="test" depends="build">
        <echo message="***** TEST STARTED *****"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>

        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>

        <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="true">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>

            <batchtest todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="src/test/java" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="***** TEST COMPLETED *****"/>
    </target>


    <!-- ===== 5. spec_launch ===== -->
    <!-- Цель для запуска видео -->
    <target name="video">
        <echo message="Запуск видео..." />
        <exec executable="xdg-open" failonerror="true">
            <arg value="${video.file}" />
        </exec>
    </target>

    <target name="music">
        <echo message="Запуск музыки..." />
        <exec executable="xdg-open" failonerror="true">
            <arg value="${music.file}" />
        </exec>
    </target>

    <target name="spec_launch">
        <!-- Если сборка не удалась, ловим ошибку и запускаем музыку -->
        <trycatch>
            <try>
                <!-- Вызов цели сборки (она может завершиться ошибкой) -->
                <antcall target="build" />
                <!-- Если успешна, запускаем видео -->
                <antcall target="video" />
            </try>
            <catch>
                <!-- Если ошибка, запускаем музыку -->
                <antcall target="music" />
            </catch>
        </trycatch>
    </target>

    <!-- ===== 6. SCP ===== -->
    <target name="scp" depends="build">

        <!-- Проверяем, что файл существует -->
        <available file="${build.dir}/${ant.project.name}.jar" property="jar.exists"/>
        <fail unless="jar.exists" message="JAR file not found in ${build.dir}!"/>

        <!-- Загружаем JAR на сервер -->
        <scp file="${build.dir}/${jar.name}"
             todir="${scp.user}@${scp.host}:${scp.helios.dir}"
             port="${scp.port}"
             password="${scp.password}"
             trust="true"/>

        <echo message="Successfully deployed ${ant.project.name}.jar to ${scp.host}:${scp.helios.dir}"/>
    </target>


    <!-- ===== 7. DOC ===== -->
    <target name="doc">
        <!-- Создаем временный MANIFEST -->
        <manifest file="${manifest.file}">
            <attribute name="Created-By" value="petrovviacheslav"/>
            <attribute name="Version" value="1.0"/>
        </manifest>

        <!-- 1. Создаем временный файл-конкатенацию -->
        <concat destfile="${build.dir}/all_classes.tmp" binary="true">
            <fileset dir="${classes.dir}" includes="**/*.class"/>
        </concat>

        <!-- 2. Рассчитываем MD5/SHA-1 для всех .class файлов -->
        <checksum file="${build.dir}/all_classes.tmp"
                  algorithm="MD5"
                  property="md5.hash"/>

        <checksum file="${build.dir}/all_classes.tmp"
                  algorithm="SHA-1"
                  property="sha1.hash"/>

        <!-- 3. Удаляем временный файл -->
        <delete file="${build.dir}/all_classes.tmp"/>

        <!-- Добавляем хеши в MANIFEST -->
        <manifest file="${manifest.file}" mode="update">
            <attribute name="Classes-MD5" value="${md5.hash}"/>
            <attribute name="Classes-SHA1" value="${sha1.hash}"/>
        </manifest>

        <javadoc destdir="${javadoc.dir}"
                 sourcepath="${main.dir}"
                 packagenames="org.viacheslav.*"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Project API">
            <classpath>
                <fileset dir="${lib.dir}" includes="**/*.jar"/>
            </classpath>
        </javadoc>
        <jar destfile="${dist.dir}/javadoc.jar"
             basedir="${classes.dir}"
             manifest="${manifest.file}">
            <!-- Добавляем Javadoc в архив -->
            <fileset dir="${javadoc.dir}" includes="**/*"/>
        </jar>

        <echo message="JAR with MANIFEST (MD5/SHA-1) and Javadoc created!"/>
    </target>

    <!-- ===== 8. XML ===== -->
    <target name="xml">
        <echo message="***** XML STARTED *****"/>
        <echo>XML project files validation...</echo>
        <xmlvalidate>
            <fileset dir="${src.dir}/webapp">
                <include name="**/*.xml"/>
            </fileset>
            <attribute name="http://xml.org/sax/features/validation" value="true"/>
            <attribute name="http://apache.org/xml/features/validation/schema"  value="true"/>
            <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
        </xmlvalidate>
        <echo message="***** XML COMPLETED *****"/>
    </target>

    <!-- ===== 9. native2ascii ===== -->
    <target name="native2ascii">
        <echo message="***** NATIVE2ASCII STARTED *****"/>
        <mkdir dir="${build.dir}/resources/resources-native"/>
        <native2ascii src="${resources.dir}"
                      dest="${build.dir}/resources/resources-native"
                      includes="**/*.properties"
                      encoding="UTF-8"
                      reverse="false"/>
        <echo message="***** NATIVE2ASCII COMPLETED *****"/>
    </target>

    <!-- ===== 10. REPORT ===== -->
    <target name="report" depends="test">
        <echo message="***** REPORT STARTED *****"/>

        <condition property="tests.successful">
            <not>
                <isset property="tests.failed"/>
            </not>
        </condition>

        <if>
            <isset property="tests.successful"/>
            <then>
                <junitreport todir="${junit.report.dir}">
                    <fileset dir="${junit.report.dir}" includes="TEST-*.xml"/>
                    <report todir="${junit.report.dir}"/>
                </junitreport>

                <move todir="${svn.dir}">
                    <fileset dir="${junit.report.dir}" includes="TEST-*.xml"/>
                </move>

                <exec executable="svn">
                    <arg value="add"/>
                    <arg value="${svn.dir}/*"/>
                </exec>
                <exec executable="svn">
                    <arg value="update"/>
                    <arg value="${svn.dir}"/>
                </exec>
                <exec executable="svn">
                    <arg value="commit"/>
                    <arg value="${svn.dir}"/>
                    <arg value="-m"/>
                    <arg value="Update report"/>
                </exec>
            </then>
            <else>
                <echo message="Tests were not successful. Skipping report generation."/>
            </else>
        </if>
        <echo message="***** REPORT COMPLETED *****"/>
    </target>


    <!-- ===== 11. ENV ===== -->
    <target name="env" depends="build">
        <echo message="***** ENV STARTED *****"/>

        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${main.dir}" destdir="${classes.dir}" classpathref="classpath" source="${compile.version}"
               includeantruntime="false">
            <compilerarg line="${vm.args}"/>
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <antcall target="build"/>
        <copy file="${build.dir}/fse-3.war" todir="${scp.dir}"/>
        <exec executable="${env.script}">
            <!--            <arg line="/c start ${env.script}"/>-->
        </exec>
        <echo message="***** ENV COMPLETED *****"/>
    </target>

    <!-- ===== 12. DIFF ===== -->
    <target name="diff">
        <echo message="***** DIFF STARTED *****"/>

        <loadproperties srcFile="${ignore.file}"/>
        <!-- Получаем список изменённых файлов -->
        <exec executable="${svn.executable}" outputproperty="svn.status" failonerror="true" dir="${svn.dir}">
            <arg value="status"/>
        </exec>

        <!-- Шаг 2: Фильтруем изменения -->
        <loadresource property="forbidden.changes">
            <string value="${svn.status}"/>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="[MA].*${ignored.patterns}"/>
                </linecontainsregexp>
            </filterchain>
        </loadresource>

        <echo message="lll ${forbidden.changes}"/>

        <!-- Шаг 3: Проверяем результат -->
        <condition property="has.forbidden.changes">
            <and>
                <isset property="forbidden.changes"/>
                <not>
                    <equals arg1="${forbidden.changes}" arg2=""/>
                </not>
            </and>
        </condition>

        <!-- Шаг 4: Действия -->
        <antcall target="commit-if-clean"/>
        <antcall target="abort-if-dirty"/>

        <echo message="***** DIFF COMPLETED *****"/>
    </target>

    <target name="commit-if-clean" unless="has.forbidden.changes">
        <exec executable="${svn.executable}" dir="${svn.dir}">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Auto-commit: безопасные изменения"/>
        </exec>
        <echo message="Коммит выполнен успешно"/>
    </target>

    <target name="abort-if-dirty" if="has.forbidden.changes">
        <fail message="Обнаружены изменения в запрещённых файлах! Коммит отменён."/>
    </target>

    <!-- ===== 13. TEAM ===== -->
    <target name="team" depends="clean"
            description="Собирает 3 предыдущие ревизии в ZIP-архив">
        <!-- Получаем список ревизий через svn log -->
        <exec executable="svn" outputproperty="svn.log.raw">
            <arg value="log"/>
            <arg value="--limit"/>
            <arg value="${num.revisions}"/>
            <arg value="--quiet"/>
            <arg value="${svn.url}"/>
        </exec>

        <!-- Фильтруем номера ревизий -->
        <loadresource property="svn.revisions">
            <string value="${svn.log.raw}"/>
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="^r(\d+).*|.*" replace="\1" flags="gm"/>
                    <trim/>
                    <ignoreblank/>
                </tokenfilter>
            </filterchain>
        </loadresource>

        <!-- Разбиваем на отдельные ревизии -->
        <loadresource property="revision.list">
            <string value="${svn.revisions}"/>
            <filterchain>
                <tokenfilter delimoutput=",">
                    <linetokenizer/>
                </tokenfilter>
            </filterchain>
        </loadresource>

        <echo message="Надо собрать ревизии: ${revision.list}"/>
        <!-- Обрабатываем каждую ревизию -->
        <for list="${revision.list}" param="revision" delimiter=",">
            <sequential>
                <antcall target="process-revision">
                    <param name="revision.number" value="@{revision}"/>
                </antcall>
            </sequential>
        </for>

        <!-- Создаем итоговый ZIP -->
        <zip destfile="${output.zip}">
            <fileset dir="${team.dir}" includes="**/*.jar"/>
        </zip>

        <echo message="Собраны ревизии: ${revision.list}"/>
        <echo message="Результат: ${output.zip}"/>
    </target>

    <!-- Обработка одной ревизии -->
    <target name="process-revision">
        <property name="rev.dir" location="${team.dir}/rev-${revision.number}"/>

        <!-- Экспорт из SVN -->
        <exec executable="svn" failonerror="true">
            <arg value="export"/>
            <arg value="-r"/>
            <arg value="${revision.number}"/>
            <arg value="${svn.url}"/>
            <arg value="${rev.dir}"/>
        </exec>

        <!-- Сборка -->
        <ant antfile="build.xml" dir="${rev.dir}" target="build"/>

        <!-- Копирование результата -->
        <copy file="${rev.dir}/${build.dir}/${ant.project.name}.jar"
              tofile="${team.dir}/${ant.project.name}-r${revision.number}.jar"
              failonerror="true"/>
    </target>

    <!-- ===== TODO: 14. HISTORY ===== -->

        <property name="history.temp.dir" location="build/history"/>
        <property name="diff.output.file" location="build/history-diff.txt"/>

        <target name="init">
            <mkdir dir="${history.temp.dir}"/>
        </target>

        <!-- Получение HEAD ревизии -->
        <target name="get-head-revision" depends="init">
            <exec executable="svn" outputproperty="head.revision" failonerror="true">
                <arg value="info"/>
                <arg value="-r"/>
                <arg value="HEAD"/>
                <arg value="--show-item"/>
                <arg value="revision"/>
            </exec>
        </target>

        <!-- Главная логика обхода ревизий -->
        <target name="history" depends="get-head-revision">
            <!-- вызов вспомогательного цикла через Ant-Contrib -->
            <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="lib/ant-contrib-1.0b3.jar"/>

            <var name="last.good.revision" unset="true"/>

            <echo message="HEAD revision: ${head.revision}"/>
            <var name="i" value="${head.revision}"/>

            <for param="rev" list="${head.revision},...,1">
                <sequential>
                    <echo>⏪ Проверка ревизии @{rev}</echo>

                    <property name="rev.dir" location="${history.temp.dir}/rev-@{rev}"/>
                    <delete dir="${rev.dir}" quiet="true"/>
                    <mkdir dir="${rev.dir}"/>

                    <exec executable="svn" failonerror="true">
                        <arg value="checkout"/>
                        <arg value="-r"/>
                        <arg value="@{rev}"/>
                        <arg value="file:///home/slava-linux/fse-3/repo/trunk"/>
                        <arg value="${rev.dir}"/>
                    </exec>

                    <!-- Проверка, есть ли build.xml -->
                    <available file="${rev.dir}/build.xml" property="has.build.xml"/>


                    <!-- Пытаемся собрать -->
                    <exec dir="${rev.dir}" executable="ant" failonerror="false" resultproperty="compile.result">
                        <arg value="compile"/>
                    </exec>

                    <echo>Результат компиляции: ${compile.result}</echo>

                    <condition property="success.compile">
                        <equals arg1="${compile.result}" arg2="0"/>
                    </condition>

                    <if>
                        <isset property="success.compile"/>
                        <then>
                            <echo>✅ Ревизия @{rev} успешно компилируется</echo>
                            <property name="last.good.revision" value="@{rev}"/>
                            <break/>
                        </then>
                    </if>
                </sequential>
            </for>

            <fail unless="last.good.revision">🛑 Ни одна ревизия не компилируется</fail>

            <!-- Вычисляем следующую ревизию -->
            <math result="next.revision" operand1="${last.good.revision}" operation="add" operand2="1"/>
            <echo>📄 Будет выполнен diff между ${last.good.revision} и ${next.revision}</echo>

            <!-- Создание diff -->
            <exec executable="svn" output="${diff.output.file}">
                <arg value="diff"/>
                <arg value="-r"/>
                <arg value="${last.good.revision}:${next.revision}"/>
            </exec>

            <echo>📝 Diff сохранён в: ${diff.output.file}</echo>
        </target>




    <!-- ===== 15. ALT ===== -->
    <target name="alt">

        <mkdir dir="${alt.src.dir}"/>
        <mkdir dir="${alt.build.dir}"/>

        <!-- Копирование с заменой через фильтры -->
        <copy todir="${alt.src.dir}">
            <fileset dir="${src.dir}" includes="**/*.java"/>
        </copy>

        <!-- Дополнительные замены через regexp -->
        <replaceregexp match="Point"
                       replace="AltPoint"
                       byline="true">
            <fileset dir="${alt.src.dir}" includes="**/*.java"/>
        </replaceregexp>

        <replaceregexp match="Point\.class"
                       replace="AltPoint\.class"
                       byline="true">
            <fileset dir="${alt.src.dir}" includes="**/*.java"/>
        </replaceregexp>

        <replaceregexp match="\(Point"
                       replace="\(AltPoint"
                       byline="true">
            <fileset dir="${alt.src.dir}" includes="**/*.java"/>
        </replaceregexp>

        <replaceregexp match="new Point\("
                       replace="new AltPoint\("
                       byline="true">
            <fileset dir="${alt.src.dir}" includes="**/*.java"/>
        </replaceregexp>

        <move file="${alt.src.dir}/java/org/viacheslav/Point.java"
              tofile="${alt.src.dir}/java/org/viacheslav/AltPoint.java"/>

        <javac srcdir="${alt.src.dir}"
               destdir="${alt.build.dir}"
               classpathref="classpath"
               includeantruntime="false"/>

        <jar destfile="${alt.build.dir}/alt-${ant.project.name}.jar">
            <fileset dir="${alt.build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="altpetrovviacheslav"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>
    </target>


</project>